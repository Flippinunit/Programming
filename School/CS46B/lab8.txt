   Anthony Langga (Driver) / Genina Po (Scribe)

A1) Done

A2) Done

A3) Done

A4) Done

A5) Done

A6) Done

A7) Done

B1) Done

B2) Done

B3) import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

public class Median1
{
   public static void main(String[] args)
   {
      int n = Integer.parseInt(args[0]);
      List<Double> lst = new ArrayList<Double>(n);
      for (int i = 1; i <= n; i++) lst.add(Math.random());
      while (lst.size() > 2)
      {
	 Double smallest = Collections.min(lst);
	 Double largest = Collections.max(lst);
	 lst.remove(smallest);
	 lst.remove(largest);
      }
      double median = 0;
      if (lst.size() == 2)
      {
	 median = (lst.get(0) + lst.get(1)) / 2;
      }
      else if (lst.size() == 1)
      {
	 median = lst.get(0);
      }

      System.out.println("Median: " + median);
   }
}

B4) Done

B5) Done

B6) Done

B7) Done

B8) import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

public class Median2
{
   public static void main(String[] args)
   {
      int n = Integer.parseInt(args[0]);
      List<Double> lst = new ArrayList<Double>(n);
      for (int i = 1; i <= n; i++) lst.add(Math.random());
      System.out.println("Median: " + median(lst));
   }

   public static double median(List<Double> lst)
   {
      while (lst.size() > 2)
      {
	 int smallestPosition = 0;
	 int largestPosition = 0;
	 for (int i = 1; i < lst.size(); i++)
	 {
	    if (lst.get(i) < lst.get(smallestPosition)) {smallestPosition = i;}
	    if (lst.get(i) > lst.get(largestPosition))  {largestPosition = i; }
	 }
	 int size = lst.size();
	 lst.set(largestPosition, lst.get(size - 1));
	 lst.set(smallestPosition, lst.get(size - 2));
	 lst.remove(size - 1);
	 lst.remove(size - 2);
      }
      if (lst.size() == 2)
      {
	 return (lst.get(0) + lst.get(1)) / 2;
      }
      else if (lst.size() == 1)
      {
	 return lst.get(0);
      }
      else return 0;
   }
}

B9) Done

B10) Done

D1) Done

D2) Sort

D3) import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

public class Median3
{
   public static void main(String[] args)
   {
      int n = Integer.parseInt(args[0]);
      List<Double> lst = new ArrayList<Double>(n);
      for (int i = 1; i <= n; i++) lst.add(Math.random());
      System.out.println("Median: " + median(lst));
   }

   public static double median(List<Double> lst)
   {
      int position;
      Collections.sort(lst);
      

      
      if (lst.size() % 2 == 0)
      {
	    position = lst.size()/2;
       return (lst.get(position) + lst.get(position + 1)) / 2;
      }
      else if (lst.size() % 2 == 1)
      {
	    position = lst.size()/2;
       return lst.get(position + 1);
      }
      return 0;
   }
}

D5) Done

E1)Done

E2) Done

E3)Done

E4) Done

E5) Done

E6) Done

E7)import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

public class Median3
{
public static void main(String[] args)
{
int n = Integer.parseInt(args[0]);
List<Double> lst = new ArrayList<Double>(n);
for (int i = 1; i <= n; i++) lst.add(Math.random());
System.out.println("Median: " + median(lst));
}

public static double median(List<Double> lst)
{
return select(lst, lst.size() / 2, 0, lst.size() - 1);
}

public static double select(List<Double> lst, int k, int from, int to)
{
if(from == to)
{
return lst.get(k);
}

int p = partition(lst, from, to);
int leftSize = p - from + 1;

if(k > p)
return select(lst, k - leftSize, p + 1, to);
else
{
if(from == 0)
return select(lst, k, from , p);
else return select(lst, lst.size() / 2, from, p);
}
}

private static int partition(List<Double> lst, int from, int to)
{
double pivot = lst.get(from);
int i = from - 1;
int j = to + 1;
while (i < j)
{
i++; while (lst.get(i) < pivot) i++;
j--; while (lst.get(j) > pivot) j--;
if (i < j)
{
// swap elements at i, j
Double temp = lst.get(i);
lst.set(i, lst.get(j));
lst.set(j, temp);
}
}
return j;
}
}
